#!/usr/bin/env node

const { yellow, green, bold, blue, cyan, red } = require('chalk')
const minimist = require('minimist')
const { log } = require('../lib/log')
const debug = require('debug')('hmc')
const Batch = require('batch')
const utils = require('../lib/utils')
const path = require('path')
const pkg = require('../package.json')
const hmc = require('../')
const os = require('os')

const CONCURRENCY = os.cpus().length

const argv = minimist(process.argv.slice(2), {
  boolean: [ 'debug', 'help', 'json', 'keygen', 'version' ],
  string: [ 'output' ],
  number: [ 'jobs' ],
  alias: {
    D: 'debug',
    h: 'help',
    j: 'jobs',
    k: 'key',
    o: 'output',
    V: 'version',
  }
})

const usage = `usage: hmc: [-hDV] [options] <input>

where options can be:

  -D, --debug         Enable debug output
  -h, --help          Print this message
  -j, --jobs=[N]      Number of concurrent jobs. (default: ${CONCURRENCY})
  --json              Output JSON
  -k, --key=<key>     Hex encoded shared secret key
  --keygen            Generate keys
  -o, --output=<dir>  Output directory. (default: build/)
  -V, --version       Print program version


Enable debug output by using the '-D, --debug' flag or set the
'DEBUG=hidden-machine*,hmc*' environment variable.

Report bugs to <${pkg.bugs.url}>. `

process.on('unhandledRejection', debug)
process.on('uncaughtException', debug)

if (argv.debug) {
  require('debug').enable('hidden-machine*,hmc*')
}

if (argv.help) {
  console.error(usage)
  process.exit(0)
}

if (argv.version) {
  console.log(pkg.version)
  process.exit(0)
}

const concurrency = 'jobs' in argv ? argv.jobs : CONCURRENCY
const jobs = new Batch().concurrency(concurrency)

const opts = Object.assign({}, argv, {
  onerror(err) {
    debug(err)
    log(process.stderr, bold(red('error: ')), err.message)
  },

  onbeforestep(step) {
    log(process.stderr, bold(yellow('before: ')), '%s', step.name, step)
  },

  onstep(step) {
    log(process.stderr, bold(cyan('step: ')), '%s', step.name, step)
  },

  onafterstep(step) {
    log(process.stderr, bold(green('after: ')), '%s', step.name, step)
  },
})

if ('output' in argv) {
  opts.compile = {
    build: path.resolve(argv.output)
  }
}

const [ input = process.cwd() ] = argv._
jobs.push((next) => {
  utils.promisedErrBack(hmc(path.resolve(input), opts), (err, results) => {
    if (err) { return next(err) }
    log(process.stderr, bold(blue('okay: ')), '%s finished', input)
    next(null, results)
  })
})

jobs.end((err, results) => {
  if (err) {
    opts.onerror(err)
  } else {
    const [ result ] = results
    if (argv.json) {
      console.log(JSON.stringify({
        publicKey: result.publicKey.toString('hex'),
        secretKey: result.secretKey.toString('hex'),
        secret: result.secret.toString('hex'),
        key: result.key.toString('hex'),
      }))
    } else {
      log(process.stderr, 'publicKey= ', result.publicKey.toString('hex'))
      log(process.stderr, 'secretKey= ', result.secretKey.toString('hex'))
      log(process.stderr, 'secret= ', result.secret.toString('hex'))
      log(process.stderr, 'key= ', result.key.toString('hex'))
    }
  }
})
